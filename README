MLFS Linux Live Kit
==============

Use this set of scripts to turn your existing preinstalled Linux
distribution into a Live Kit (formely known as Live CD).
Make sure to extract and use it on a posix-compatible filesystem,
since it creates some (sym)links and such.

This was forked from https://github.com/Tomas-M/linux-live and modified
with the purpose of creating a Live Kit from an existing preinstalled
Musl Linux from Scatch build.

A lot of changes were made as the MLFS I build use skarnet's s6 & s6-rc.
Therefor the main branch will be s6-s6rc. I have not tested the original
Linux Live Kit on an MLFS build that uses SysVinit or any other inits.

Note:

* Store Linux Live kit in a directory which is not going to be included
  in your live distro, else it would be copied to it. Best practice is to
  make a directory such as /a and put these scripts there.
  Be warned, if you put it to /tmp, some distros may erase it on reboot.

* Before you start building your Kit, edit the file ./config
  Most importantly change the LIVEKITNAME variable.

* Make sure your kernel is in /boot/vmlinuz or change the path in ./config
  Your kernel must support squashfs. Your kernel must also support either
  aufs or overlayfs or both. AUFS is recommended for more flexibility,
  but if your distro does not support it, overlayfs will work too. Current
  mainstream kernels (like 5.17.x) do not have AUFS support. Overlayfs will
  be automatically used.

* You may also wish to replace boot graphics in ./bootfiles/bootlogo.png
  (one options is to modify and run the ./tools/bootlogo.update script) 
  and reorganize isolinux.cfg to fit your needs (when editing the file,
  keep all paths in /boot/, it will be rellocated during LiveKit creation).
  **Currently, script does not work as it assumes running system is debian
  based.**

* Linux Live Kit comes with precompiled static binaries in ./initramfs
  directory. Those may be outdated but will work. You may replace them
  by your own statically linked binaries, if you know how to compile them.  

* If you plan to boot your Live Kit from CD, you need to recompile
  syslinux.bin else it won't be able to boot your Live Kit from directory
  LIVEKITNAME. There is a script prepared for you which will handle all
  of that. Simply go to directory ./tools/ and run isolinux.bin.update ...
  it will update ./bootfiles/isolinux.bin automatically by downloading
  isolinux sources, patching them using your actual LIVEKITNAME and
  recompiling. This step is not needed if you plan to boot from USB only.
  ** Script broken for MLFS builds...work in progress. **

* If you plan to boot your Live Kit from USB device, you may wish to add
  the following boot parameter to the end of APPEND section in syslinux.cfg:
     perch
  This parameter activates persistent changes

* If you have tmpfs mounted on /tmp during building your Live Kit ISO,
  make sure you have enough RAM since LiveKit will store lots of data in /tmp.
  If you are low on RAM, make sure /tmp is a regular on-disk directory.

* When done, run the ./build script to create your Live Kit
  - it will create ISO and TAR files for you in /tmp
  - make sure you have enough free space in /tmp to handle it
  
* If you want to use the Live Kit on a USB you have to either
  - use Windows to execute the bootinst.bat file in the $NAME/boot folder
  - or use Linux to execute the shellscript bootinst.sh in the $NAME/boot folder.
  - Under Windows, do NOT run batch file bootinst.bat as administrator. A 
    regular user is enough to run it.

* You will need the following packages to be installed:
  - squashfs-tools
  - genisoimage or mkisofs OR libisoburn
  - zip

This repo's Author: Derrick S. <https://github.com/dslm4515>
Original Author: Tomas M. <http://www.linux-live.org>
